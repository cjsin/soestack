#!/bin/bash

# Load routines such as msg,die,notice
. /soestack/provision/common/lib/lib.sh

{%- set hostname = grains.fqdn %}
{%- set hostname_components = hostname.split('.') %}
{%- set hostname_domain = '.'.join(hostname_components[0:-1]) %}

{%- set install   = config.install %}
{%- set passwords = {'ds': 'ds', 'master': 'master', 'admin': 'admin'} %}
{%- set ip        = config.ip if 'ip' in config else grains.fqdn_ip4[0] %}
{%- set fqdn      = grains.fqdn if 'fqdn' not in config or config.fqdn == 'auto' else config.fqdn %}
{%- set realm     = config.realm if 'realm' in config else 'IPA' %}
{%- set domain    = config.domain if 'domain' in config else hostname_domain %}

DEBUG="{{'echo' if 'debug' in install and install.debug else ''}}"
TIMESTAMP=$(date +%s)
logprefix="/var/log/ipaserver-install"

function uninstall_failed_first()
{
    local logfile="${logprefix}.log"
    if [[ -f "${logfile}" ]]
    then
        if [[ -f "${logprefix}.FAILED" ]]
        then
            notice "Uninstalling failed ipa server installation"
            ipa-server-install --uninstall -U 
            local timestamp=$(stat -c %Z "${logfile}")
            mv "${logfile}" "${logprefix}.FAILED.${TIMESTAMP}.log"
        else
            echo "The IPA service seems to have already been installed successfully" 1>&2
        fi
    fi
}

function install_server()
{
    # Load pre-generated passwords
    . "{{pwfile}}"

    [[ -n "${master_password}" ]] || die "No random ipa passwords generated!"

    local -a options=(
        # Skip dns check
        "--no-host-dns"
        # Skip another dns check
        "--allow-zone-overlap"

        "--mkhomedir"
        "--ssh-trust-dns"

        "--realm={{realm}}"
        "--domain={{domain}}"
        "--hostname={{fqdn}}"
        "--ip-address={{ip}}"
        "--no-host-dns"

        {%- if install.dns.enabled %}
        "--setup-dns"
        {#  forwarders during installation are disabled because it always fails #}
        {#  Instead - forwarders are configured later #}
        {%- if True %}
        "--no-forwarders"
        {%- else %}
        {%- for f in install.dns.forwarders %}
        "--forwarder={{f}}"
        {%- endfor %}
        {%- endif %}
        # "--reverse-zone={{''}}"
        # "--auto-reverse"
        "--reverse-zone=$(echo "{{ip}}" | tr '.' '\n' | head -n3 | tac|tr '\n' '.' )in-addr.arpa."
        {%- endif %} 

        # "--master-password=${master_password}"
        "--admin-password=${admin_password}"
        "--ds-password=${ds_password}"
    )

    # The installation is performed with selinux disabled 
    # and the firewall rules flushed, because it has troubles otherwise.
    # The rules it requires can be configured after
    msg "Preparing server for ipa server install (temporarily disable firewall, selinux)"

    local selinux_state=$(getenforce)
    if [[ "${selinux_state}" =~ Enforcing ]]
    then
        msg "SELinux is enforcing - going Permissive..."
        setenforce 0
    fi

    msg "Flush firewall"
    iptables -F
    iptables -nvL

    msg "OK - continuing with unattended install"
    local result
    ${DEBUG} ipa-server-install -U "${options[@]}"
    result=$?
    
    msg "Installation result is ${result}"
    if (( result ))
    then
        msg "The installation failed."
    fi

    msg "Re-enabling selinux, firewall as required"

    if [[ "${selinux_state}" =~ Enforcing ]]
    then
        msg "Set selinux Enforcing again"
        setenforce 1
    fi

    msg "Restart firewall"
    systemctl restart iptables
    
    # Return the ipa-server-install exit code 
    return ${result}
}

function main()
{
    uninstall_failed_first
    
    rm -f "${logprefix}.FAILED"

    if install_server
    then

        mkdir -p /var/cache/salt/master
        export KRB5CCNAME=/var/cache/salt/master/salt.krb

        notice "Installation was successful. Preparing salt/IPA integration ticket (${KRB5CCNAME})."
        kinit admin <<< "${admin_password}"

        # Set up root profile to use the same ticket
        echo "export KRB5CCNAME=/var/cache/salt/master/salt.krb" >> /root/.profile

        notice "Salt ipa ticket can be renewed during installation phase, using 'salt-ipa-ticket-<deployment-name> --renew'."

        msg "Running IPA post-install"
        /usr/local/sbin/ipa-postinstall-{{deployment_name}}
        # Note, the exit code from ipa-postinstall is passed out here just to make it explicit
        return $?
    else

        local saved="${logprefix}.FAILED.${TIMESTAMP}.log"
        cp -f "${logprefix}.log" "${saved}"
        touch -f "${logprefix}.FAILED"
        err "IPA server install failed - log file is ${saved}"
        err "IPA post-install will be skipped"
        return 1
    fi
}

main "${@}"

#!/bin/bash

. /usr/local/bin/lib-ss.sh || exit 1
. /usr/local/bin/lib-ipa.sh || die "Failed loading ipa lib"
. /etc/sysconfig/ipa-tools || die "IPA tools are not configured"

function ipa::reset-ds-password::process-args()
{
    local arg
    while (( $# ))
    do
        arg="${1}"
        shift
        case "${arg}" in
            -h|-help|--help|help)
                ipa::reset-ds-password::usage
                return 1
                ;;
            -ask)
                force_ask=1
                ;;
            --secret=*|-secret=*)
                secret_name="${arg#*=}"
                ;;
            *)
                ipa::reset-ds-password::usage
                return 2
                ;;
        esac
    done
}

function ipa::reset-ds-password::update-ldif-file()
{
    local ldap_instance="${IPA_REALM//./-}"

    msg "Stopping dirsrv ${ldap_instance}"
    if ! stop-dirsrv "${ldap_instance}"
    then 
        #die "Failed stopping dirsrv instance '${ldap_instance}'\!"
        warn "Failed stopping dirsrv instance '${ldap_instance}'\!"
    fi 


    local status
    local newpwdhash
    local cfgdir="/etc/dirsrv/slapd-${ldap_instance}"
    newpwdhash=$(pwdhash -D "${cfgdir}" "${temporary_password}")
    status=$?
    if (( status )) || [[ ! "${newpwdhash}" =~ ^[{] ]]
    then 
        err 'pwdhash generation failed!'
        return 1
    fi
    local ldif_file="${cfgdir}/dse.ldif"
    local interesting_lines=( $(sed -n '/^nsslapd-rootpw/,/^ /=' < "${ldif_file}") )
    
    local line
    local -a sed_flags=()
    local last_line=""
    for line in "${interesting_lines[@]}"
    do 
        if [[ -z "${line_to_insert}" ]]
        then
            sed_flags+=("-e" "${line} d")
        else
            sed_flags+=("-e" "${line} d")
        fi
        last_line="${line}"
    done

    if [[ -z "${last_line}" ]]
    then 
        err "Did not find the expected lines for editing in ${ldif_file}"
        return 1
    fi

    local next_line=$((last_line+1))
    local wrapped=""
    newpwdhash="nsslapd-rootpw: ${newpwdhash}"
    while [[ -n "${newpwdhash}" ]]
    do
        [[ -n "${wrapped}" ]] && wrapped+="\\n "
        wrapped+="${newpwdhash:0:78}"
        newpwdhash="${newpwdhash:78}"
    done
    sed_flags+=("-e" "${next_line} i${wrapped}")

    touch "${ldif_file}.new"
    chmod go-rwx "${ldif_file}.new"
    if ! sed "${sed_flags[@]}" < "${ldif_file}" > "${ldif_file}.new"
    then 
        err "Sed edits would fail. Refusing to continue."
        err "You'll probably want to check what has happend and then run start-dirsrv ${ldap_instance} to restart the service"
        return 1
    fi 

    msg "Changes will be as follows:"
    diff -U5 "${ldif_file}" "${ldif_file}.new"
    rm -f "${ldif_file}.new"

    msg "The old file will be backed up as ${ldif_file}.orig"
    msg "Updating ${ldif_file} in place."
    if ! sed -i.orig "${sed_flags[@]}" "${ldif_file}"
    then 
        err 'The sed edit failed!'
        return 1
    fi
    
    start-dirsrv "${ldap_instance}"
    sleep 5

    return 0
}

function ipa::reset-ds-password::update-pw-online()
{
    local temporary_password="${1}"
    local secret_name="${2}"
    msg "Proceeding to use dsconf/ldapmodify to reset the password more securely"

    local tmpfile=$(mktemp /root/.tmp_ds_reconfig_XXXXXXXXX)
    local pwfile=$(mktemp /root/.tmp_ds_reconfig_XXXXXXXXX)
    if [[ -n "${tmpfile}" ]]
    then
        local new_secret_password=$(salt-secret "${secret_name}")
        if [[ -n "${new_secret_password}" ]]
        then 
            touch "${tmpfile}" "${pwfile}"
            chmod go-rwx "${tmpfile}" "${pwfile}"
            # NOTE the password file cannot have a linefeed or carriage return at the 
            # end of it. The entire contents of the file are used.
            tr -d '\n' <<< "${temporary_password}" > "${pwfile}"
            {
                echo "dn: cn=config"
                echo "changetype: modify"
                echo "replace: nsslapd-rootpw"
                echo "nsslapd-rootpw: ${new_secret_password}"
            } >> "${tmpfile}"
            # The centos ldap server version is not new enough for dsconf
            #echo dsconf -D "cn=Directory Manager" "${ldap_instance}" directory_manager password_change
            if ldapmodify -x -H "ldaps://${IPA_SERVER}:636" -D "cn=directory manager" -W -f "${tmpfile}" -y "${pwfile}"
            then
                msg "The operation appears to have been successful."
                msg "The new password is available to the admin via 'salt-secret ${secret_name}'"
                rm -f "${tmpfile}" "${pwfile}"
                return 0
            else 
                rm -f "${tmpfile}" "${pwfile}"
                err "The ldapmodify failed."
                return 1
            fi
        else 
            err "Failed accessing the newly generated secret."
        fi
    else
        err "Currently the system is failing to generate temp files. Has disk space run out?"
    fi
}

function ipa::reset-ds-password::perform-change()
{
    msg "NOTE: This script is for changing the ds admin password if it has been lost/forgotten/inadvertantly changed."
    msg "      If you still know the current password, use the 'dsconf' or 'ldapmodify' programs."
    msg
    msg ""
    msg "WARNING: The new password will be generated using a commandline utility which exposes"
    msg "         the plain text password on the commandline. You should make sure that non-administrative"
    msg "         users are not logged in or able to log in while running this utility."
    msg ""

    read -p "Hit enter when you are ready to continue."

    if ! command -v pwdhash > /dev/null 2> /dev/null
    then 
        err "The pwdhash utility is not available"
        return 1
    fi 

    msg "The ldap service will be shut down and a temporary random password will be set."
    msg "This temporary password is exposed in plaintext on the commandline."
    msg "After that, the service will be started again and immediately reset again"
    msg "in a more secure manner."

    local -a generate_command=(
        generate-passwords "-min-length=${min_length}" "${secret_name}-new"
    )

    if [[ -z "${secret_name}" ]] || (( force_ask ))
    then
        msg "You will be asked to set the new password, with a length of ${min_length} characters."
        generate_command+=("-ask")
    else 
        generate_command+=("-random")
    fi

    if ! "${generate_command[@]}"
    then 
        err "Password generation failed."
        return 1
    fi 
    
    local temporary_password=$(mktemp -u XXXXXXXXXXXXX)
    if ! ipa::reset-ds-password::update-ldif-file "${temporary_password}"
    then 
        return 1
    fi

    if ! ipa::reset-ds-password::update-pw-online "${temporary_password}" "${secret_name}-new"
    then 
        salt-secret --delete --force "${secret_name}-new"
        return 1
    fi
    
    msg "Storing new secret encrypted"
    if salt-secret "${secret_name}-new" | salt-secret -save -stdin "${secret_name}"
    then 
        msg "Deleting temporary storage"
        salt-secret --delete --force "${secret_name}-new"
    fi

    msg "All done."
}

function ipa::reset-ds-password::main()
{
    local min_length="13"
    local secret_name="pw-ipa-ds"
    local status
    ipa::reset-ds-password::process-args "${@}"
    status=$?
    if [[ "${status}" == 1 ]]
    then
        return 0
    elif [[ "${status}" != 0 ]]
    then 
        exit 1
    fi

    ipa::reset-ds-password::perform-change
}

ipa::reset-ds-password::main "${@}"

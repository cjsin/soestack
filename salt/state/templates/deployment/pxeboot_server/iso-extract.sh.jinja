#!/bin/bash

HELP_REGEX='(^|[[:space:]])(-h|-help|--help|help)([[:space:]]|$)'
ISO_REGEX='[.]iso$'
iso=""
out=""
allow_loop_mount=0
mount_immediately=0

function usage()
{
    echo "Usage: ${0} [--allow-loop-mount] [--mount] iso-file output-dir" 1>&2
    echo "Extract an iso contents into a directory or configure the iso to be mounted on that directory" 1>&2
    echo ""
    echo "Using --allow-loop-mount and --mount together will cause it to be mounted immediately" 1>&2
    echo ""
    echo "The output directory must already exist." 1>&2
}

function process_commandline()
{
    local arg
    for arg in "${@}"
    do
        if [[ "${arg}" =~ ${HELP_REGEX} ]]
        then
            usage
            exit 0
        elif [[ -f "${arg}" && "${arg,,}" =~ ${ISO_REGEX} ]]
        then 
            iso="${arg}"
        elif [[ -d "${arg}" ]]
        then
            out="${arg}"
        else
            case "${arg}" in 
                --allow-loop-mount)
                    allow_loop_mount=1
                    ;;
                --mount)
                    mount_immediately=1
                    ;;
                *)
                    echo "Unrecognised argument: '${arg}'" 1>&2
                    usage
                    exit 1
            esac
        fi
    done 
}

function configure_loop_mount()
{
    local mount_regex="${iso}[[:space:]]+${out}[[:space:]]+(auto|iso.*)[[:space:]]+(.*,|)loop(,.*|)[[:space:]]+([0-9]+){2}"
    if ! egrep -q "${mount_regex}" /etc/fstab
    then
        echo "${iso} ${out} auto defaults,ro,loop,auto,nofail 0 0 " >> /etc/fstab
    else
        echo "Already configured"
    fi
}

function perform_extraction()
{
    readarray -t dirs <<< "$( isoinfo -R -J -l -i "${iso}" | egrep Directory.listing.of | cut -d' ' -f4- )"

    for d in "${dirs[@]}"
    do
        mkdir -p "${out}/${d}"
    done

    readarray -t listing <<< "$(isoinfo -R -J -f -i "${iso}")"

    for f in "${listing[@]}"
    do
        if [[ ! -d "${out}/${f}" ]]
        then
            if ! isoinfo -R -J -f -i "${iso}" -x "${f}" > "${out}/${f}"
            then
                echo 'An error occurred! Bailing!' 1>&2
                return 1
            fi
        fi
    done

    return 0
}

function main()
{
    process_commandline "${@}"

    if ! [[ -f "${iso}" ]]
    then
        echo "No iso file" 1>&2
        exit 1
    fi

    if [[ -z "${out}" ]]
    then
        echo "Missing output folder" 1>&2
        exit 1
    fi

    mkdir -p "${out}"

    if (( allow_loop_mount ))
    then
        configure_loop_mount
        if (( mount_immediately ))
        then
            if grep -F " ${out} " /proc/mounts
            then
                echo "Already mounted" 1>&2
            else 
                mount "${out}"
            fi
        fi
    else
        perform_extraction
    fi

    echo "Done".
}

main "${@}"

#!/bin/bash
. /usr/local/bin/soestack-lib.sh

secret_name_regex='^[A-Za-z]([-A-Za-z0-9_]*[A-Za-z0-9]|)$'
salt_pki="/etc/salt/pki"
storage="/etc/salt/secrets"
master_keyfile="/etc/salt/pki/master/master.pem" 
storage_dir=""
verbose=0

function check_dir()
{
    [[ -d "${1}" ]] || mkdir "${1}"
    chmod 700 "${1}"
}

function usage()
{
    local exitcode="${1:-0}"
    echo "${0##*/} [-h|-help|--help|help]  [-stdin|-env] secret-name"
    exit ${exitcode}
}

function run()
{
    if (( verbose ))
    then 
        echo "Run: ${*}" 1>&2
    fi
    "${@}"
}


function do_load()
{
    local secret_name="${1}"
    local storage_file="${2}"
    local keyfile="${3}"
    local format="${4}"
    local output="${5}"
    local outfile="${6}"
    local -a flags=()
    
    local -a command=(openssl rsautl -decrypt -inkey "${keyfile}" -in "${storage_file}")
    if [[ "${format}" == "base64" ]]
    then
        if [[ "${output}" == "file" && -n "${outfile}" ]]
        then
            run "${command[@]}" | base64 > "${outfile}"
        else
            run "${command[@]}" | base64
        fi
    else 
        if [[ "${output}" == "file" && -n "${outfile}" ]]
        then
            run "${command[@]}" -out "${outfile}"
        else
            run "${command[@]}"
        fi
    fi
}

function do_save()
{
    local secret_name="${1}"
    local storage_file="${2}"
    local pubkey="${3}"
    local source="${4}"

    local input=""
    case "${source}" in 
        "")
            err "No data source specified!"
            usage 1
            ;;
        stdin)
            msg "Reading from stdin"
            input=$(cat)
            msg "Read {%raw%}${#input}{%endraw%} bytes of data"
            ;;
        env)
            local varname="${secret_name//-/_}"
            varname="${varname^^}"
            if env | grep -q "^${varname}="
            then 
                input="${!varname}"
                msg "Secret to save is ${input}"
            else
                err "Expected environment variable ${varname} was not set"
                usage 1
            fi
            ;;
        *)
            usage 1
            ;;
    esac

    local encrypted
    encrypted=$(run openssl rsautl -encrypt -inkey "${pubkey}" -pubin -out "${storage_file}" <<< "${input}")
    if [[ "$?" != "0" ]]
    then
        err "Encryption failed - data may be too long"
        return 1
    fi

    echo "Stored ${storage_file}"
    return 0
}

function main()
{
    local source=""
    local mode="auto"
    local automode=""
    local what="auto"
    local output="stdout"
    local format="binary"
    local outfile=""

    local arg
    while (( $# ))
    do
        arg="${1}"
        shift
        case "${arg}" in
            -h|-help|--help|help)
                usage 0
                ;;
            -save|-store)
                mode="save"
                ;;
            -get|-load)
                mode="load"
                ;;
            -ascii|-base64)
                format="base64"
                automode+="load"
                ;;
            -outfile)
                output="file"
                outfile="${1}"
                [[ -n "${outfile}" ]] || die "Output file was not specified"
                outfile=$(readlink -f "${outfile}")
                local outdir=$(dirname "${outfile}")
                [[ -d "${outdir}" ]] || die "Output directory ${outdir} does not exist"
                automode+="save"
                ;;
            -minion)
                what="minion"
                ;;
            -master)
                what="master"
                ;;
            -stdin)
                source="stdin"
                automode+="save"
                ;;
            -env)
                source="env"
                automode+="save"
                ;;
            *)
                
                if [[ "${arg}" =~ ${secret_name_regex} ]]
                then
                    secret_name="${arg}"
                else
                    err "Invalid secret name: '${arg}'"
                    usage 1
                fi
                ;;
        esac
    done

    if [[ "{%raw%}${#automode}{%endraw%}" -gt 4 ]]
    then
        err "Conflicting flags specified - some are applicable only for load mode, and some for save mode."
        usage 1
    elif [[ -z "${automode}" && "${mode}" == "auto" ]]
    then
        automode="load"
    fi

    if [[ -n "${automode}" && "${mode}" != "auto" && "${automode}" != "${mode}" ]]
    then 
        err "A mode '-save' or '-load' was specified which conflicts with other flags that were present."
        usage 1
    fi

    if [[ "${mode}" == "auto" ]]
    then
        mode="${automode}"
    fi

    if [[ "${what}" == "auto" ]]
    then
        what="minion"
        [[ -f "${master_keyfile}" ]] && what="master"
    else
        [[ "${what}" == "master" && ! -f "${master_keyfile}" ]] && die "Master mode specified but this node has not run as a master"
    fi 
    
    local keyfile="${salt_pki}/${what}/${what}.pem"
    local pubkey="${salt_pki}/${what}/${what}.pub"
    local storage_dir="${storage}/${what}"

    [[ -n "${secret_name}" ]] || die "No secret name specified"
    [[ "${secret_name}" =~ / ]] && die "Invalid secret name specified"
    local storage_file="${storage_dir}/${secret_name}"

    check_dir "${storage}"
    check_dir "${storage_dir}"

    if [[ "${mode}" == "save" ]]
    then 
        do_save "${secret_name}" "${storage_file}" "${pubkey}" "${source}" 
    elif [[ "${mode}" == "load" ]]
    then
        do_load "${secret_name}" "${storage_file}" "${keyfile}" "${format}" "${output}" "${outfile}"
    fi
}

main "${@}"

#!/bin/bash
cp "${BASH_SOURCE[0]}" "/tmp/build-rpm-package-$$.sh"
cat "${0}"

subdir="{{params.subdir}}"
configure_flags=( {{params.configure_flags or ''}} )
make_flags=( {{params.make_flags or ''}} )
package_name="{{params.pkgname}}"
rpm_version="{{params.rpm_version}}"
version="{{params.version}}"
rpm_distribution="{{params.rpm_distribution}}"
rpm_summary="{{params.rpm_summary}}"
rpm_os="linux" 
package_url="{{params.package_url}}" 
rpm_description="{{params.rpm_summary}}"
rpm_vendorsuffix="{{params.rpm_vendorsuffix}}"
vendor="{{params.rpm_vendor}}"
package_license="{{params.package_license}}" 
sourcedir="{{paths.source}}"
distdir="{{paths.dist}}"
rpmdir="{{paths.rpm}}"
outfile="{{paths.outfile}}"
clean="{{clean}}"

export DESTDIR="${distdir}"
logdir="{{params.logdir}}"
logprefix="{{params.logprefix}}"

full_build_log="${logprefix}/all.log"


function die()
{
    echo "Fatal: ${*}" 1>&2
    exit 1
}

function msg()
{
    echo "${*}" 1>&2
}

function build-rpm::prep-logs()
{
    mkdir -p "${logdir}" "${logprefix}"
}

{%- for step_name in params.build_steps.split(',') %}
{%-    set step_script = params.steps[step_name] if step_name in params.steps else 'unset' %}
function build-rpm::run::{{step_name}}()
{
    msg "Running step {{step_name}}"
    {%- if step_script == 'unset' %}
    die "Script for step {{step_name}} is not defined in pillar."
    {%- else %}
    ( {{step_script|indent(8)}} ) || die "Failed step {{step_name}}"
    {%- endif %}
}
{%- endfor %}

function build-rpm::run-steps()
{
    {
        {%- for step_name in params.build_steps.split(',') %}
        local step_logfile="${logprefix}/{{step_name}}.log"
        local step_logdir="${step_logfile%/*}"
        mkdir -p "${step_logdir}"
        echo "Begin step {{step_name}} at date $(date)" > "${step_logfile}"
        if ! build-rpm::run::{{step_name}} 2>&1 | tee -a "${step_logfile}"
        then
            exit 1
        fi
        {%- endfor %}
    } 2>&1 | tee "${full_build_log}"
}

function build-rpm::main()
{
    [[ -d "${sourcedir}" ]] || die "No build dir"
    [[ -d "${distdir}" ]] || die "No dist dir"
    [[ -d "${rpmdir}" ]] || die "No rpm dir"

    cd "${sourcedir}" || die "Could not enter source dir"

    if [[ -n "${subdir}}" ]]
    then
        cd "${subdir}" || die "Could not find expected subdirectory"
    else
        echo "No subdir defined - files will be expected to be within ${sourcedir}"
    fi

    build-rpm::prep-logs
    build-rpm::run-steps
}

set -o pipefail
build-rpm::main

#!/bin/bash
cp "${BASH_SOURCE[0]}" "/tmp/build-rpm-package-$$.sh"
cat "${0}"

subdir="{{params.subdir}}"
configure_flags=( {{params.configure_flags or ''}} )
make_flags=( {{params.make_flags or ''}} )
package_name="{{params.pkgname}}"
rpm_version="{{params.rpm_version}}"
version="{{params.version}}"
rpm_distribution="{{params.rpm_distribution}}"
rpm_summary="{{params.rpm_summary}}"
rpm_os="linux" 
package_url="{{params.package_url}}" 
rpm_description="{{params.rpm_summary}}"
rpm_vendorsuffix="{{params.rpm_vendorsuffix}}"
vendor="{{params.rpm_vendor}}"
package_license="{{params.package_license}}" 
sourcedir="{{paths.source}}"
distdir="{{paths.dist}}"
rpmdir="{{paths.rpm}}"
outfile="{{paths.outfile}}"

export DESTDIR="${distdir}"
logdir="${distdir}/var/log/build"
logprefix="${logdir}/${package_name}-${version}-${rpm_version}-"
mkdir -p "${logdir}"
configure_log="${logprefix}configure.log"
make_log="${logprefix}make.log"
install_log="${logprefix}make.log"
fpm_log="${logprefix}fpm.log"
set -o pipefail

die()
{
    echo "Fatal: ${*}" 1>&2
    exit 1
}

run_configure()
{ 
    ( ./configure "${configure_flags[@]}"  2>&1 | tee "${configure_log}" ) || die "Failed running configure"
}

run_make()
{
    ( make "${make_flags[@]}"  2>&1 | tee "${make_log}" )  || die "Failed building"
}

run_make_install()
{
    ( make install DESTDIR="${DESTDIR}"  2>&1 | tee "${install_log}" ) || die "Failed installing"
}

fpm_package()
{
    local -a fpm_args=(
        -t rpm 
        --force 
        --rpm-os linux 
        --rpm-auto-add-directories  
        --rpm-dist     "${rpm_distribution}" 
        --rpm-summary  "${rpm_summary}"
        --url          "${package_url}"
        --description  "${rpm_description}"
        -S             "${rpm_vendorsuffix}"  
        -a             "native" 
        --vendor       "${vendor}"
        --version      "${version}" 
        --iteration    "${rpm_version}"
        --license      "${package_license}" 
        -n             "${package_name}"
        -C             "${distdir}" 
        -p             "${outfile}" 
        -s dir "."
    )
    
    chmod -R ug-st "${distdir}"
    echo fpm "${fpm_args[@]}" >> "${fpm_log}"
    fpm "${fpm_args[@]}" 2>&1 | tee -a "${fpm_log}"
}

build_main()
{
    [[ -d "${sourcedir}" ]] || die "No build dir"
    [[ -d "${distdir}" ]] || die "No dist dir"
    [[ -d "${rpmdir}" ]] || die "No rpm dir"

    cd "${sourcedir}" || die "Could not enter source dir}"

    if [[ -n "${subdir}}" ]]
    then
        cd "${subdir}" || die "Could not find expected subdirectory"
    else
        echo "No subdir defined - files will be expected to be within ${sourcedir}"
    fi

    {{ params.build_steps|indent(4) }}
}

build_main

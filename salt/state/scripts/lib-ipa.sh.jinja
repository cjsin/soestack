#!/bin/bash

[[ "${SS_LOADED_SS_LIB}" == "1" ]] || . /usr/local/bin/lib-ss.sh || exit 1
[[ -f "/etc/sysconfig/ipa-tools" ]] && . "/etc/sysconfig/ipa-tools"

ticket_dir="/var/cache/salt/master"
installation_pwfile=/etc/sysconfig/ipa-passwords
KRB5CCNAME="${ticket_dir}/salt.krb"
HELP_REGEX='(^|[[:space:]])(-h|-help|--help|help)([[:space:]]|$)'

deployment_name="${IPA_DEPLOYMENT}"
managed_hosts_key="${IPA_MANAGED_HOSTS}"
registered_hosts_file="/etc/ss-hosts-${deployment_name}"
ipa_realm="${IPA_REALM}"
default_reverse_zone="${IPA_REVERSE_ZONE}"
default_regular_zone="${IPA_DOMAIN}"
default_site="${IPA_DEFAULT_SITE}"

ip_octet='[0-9]{1,3}'

# NOTE: except for fqdn_regex where it is unavoidable, these regex 
# for IP and MAC and hostname deliberately do not use capturing groups or include anchors (^ and $)
# because they are intended to be include-able within other regular expressions
# The _single versions do include anchors
# The _embedded versions will match inside a string (at start or end, or with spaces on either side)

#valid_username_regex='^[a-z]([-_a-z0-9]*[a-z0-9])$'
valid_username_regex='^[a-z]([-_][A-Za-z0-9]+)*[a-zA-Z0-9]+$'

ip_regex="${ip_octet}[.]${ip_octet}[.]${ip_octet}[.]${ip_octet}"
ip_regex_single="^${ip_regex}\$"

mac_octet='[aAbBcCdDeEfF0-9]{2}'
mac_regex="${mac_octet}:${mac_octet}:${mac_octet}:${mac_octet}:${mac_octet}:${mac_octet}"
mac_regex_single="^${mac_regex}\$"
# No embedded version for mac address, as it is a fixed length it's not necessary to distinguish where it is

host_octet1="[a-zA-Z0-9]"
host_octet="[-a-zA-Z0-9_]"
host_part_regex="${host_octet1}${host_octet}*"
host_part_single="^${host_part_regex}\$"
host_part_embedded="^"

fqdn_regex="${host_part_regex}([.]${host_part_regex})+"
fqdn_regex_single="^${fqdn_regex})\$"
fqdn_regex_at_start="^${fqdn_regex}[[:space:]]"
fqdn_regex_at_end="[[:space:]]${fqdn_regex}\$"
fqdn_regex_in_middle="[[:space:]]${fqdn_regex}[[:space:]]"
fqdn_regex_embedded="${fqdn_regex_single}|${fqdn_regex_at_start}|${fqdn_regex_in_middle}|${fqdn_regex_at_end}"

reverse_regex_xyz="${ip_octet}[.]${ip_octet}[.]${ip_octet}[.]in-addr[.]arpa"
reverse_regex_yz="${ip_octet}[.]${ip_octet}[.]in-addr[.]arpa"
reverse_regex_z="${ip_octet}[.]in-addr[.]arpa"
reverse_regex="${reverse_regex_xyz}|${reverse_regex_yz}|${reverse_regex_z}"
reverse_regex_single="^(${reverse_regex})$"
# No _embedded version for reverse_regex - it's not needed yet and would be very long 

# Set LC_COLLATE to make sure [a-f] is just "abcdef" not  "aAbBcCdDeEfF" or "abcdefghijklmnopqrstuvwxyzABCDEF" depending on case sensitivity
export LC_COLLATE=C

# Match an ss-hosts line into 4 matching groups - 1=ip, 2= fqdn, 3=domain, 4=aliases 5=entry-type 6=mac
ss_host_regex="^(${ip_regex})[[:space:]]+(${fqdn_regex})[[:space:]]*(.*)#[[:space:]]*(client|dns)[[:space:]]+(${mac_regex})([[:space:]]|\$)"

function run()
{
    echo "Run ${*}" 1>&2
    "${@}"
}

function ipa::salt-lookup-managed-host()
{
    local name="${1}"
    msg "Looking up managed host '${name}' this can take a little while..."
    local short_hostname="${name%%.*}"
    salt-call pillar.get "${managed_hosts_key}:${short_hostname}" --out key | grep -v 'Local Keys' | sed 's/:[[:space:]]*/=/'
}

function ipa::salt-lookup()
{
    local short_hostname="${1}"
    shift
    local lookup_what=( "${@}" )
    local -a result=()
    local -a ret=()
    local what=""
    result=( $(ipa::salt-lookup-managed-host "${short_hostname}") )

    for what in "${lookup_what[@]}"
    do
        local found=""
        local result_item
        for result_item in "${result[@]}"
        do 
            local key="${result_item%%=*}"
            if [[ "${key}" == "${what}" ]]
            then 
                found="${result_item#*=}"
                break
            fi
        done
        if [[ -z "${found}" ]]
        then
            msg "No salt '${what}' information found for host '${short_hostname}'"
            found="-"
        fi
        ret+=("${found}")
    done 

    echo "${ret[@]}"
}

function ipa::lookup-host-info-registered-hostfile()
{
    local fqdn="${1}"

    local line this_ip this_fqdn remainder aliases found_host_ip found_mac  
    local -a hostdata_lines=()

    readarray -t hostdata_lines < "${registered_hosts_file}"

    for line in "${hostdata_lines[@]}"
    do
        #echo line is "'$line'"
        read this_ip this_fqdn remainder <<< "${line}"
        if [[ "${this_fqdn}" == "${fqdn}" ]]
        then 
            aliases="${remainder%#*}"
            found_host_ip="${this_ip}"
            found_mac=$( awk '{print $1}' <<< "${remainder#*#}")
            break
        fi
    done

    echo "${found_host_ip:--}" "${found_mac:--}"
}

function ipa::lookup-host-info()
{
    local fqdn="${1}"
    local short_hostname="${fqdn%%.*}"
    local -a salt_result=( $(ipa::salt-lookup "${short_hostname}" "ip" "mac") )
    local ip="${salt_result[0]}"
    local mac="${salt_result[1]}"
    if [[ "${ip}" == "-" || "${mac}" == "-" ]]
    then 
        local -a file_result=( $(ipa::lookup-host-info-registered-hostfile "${fqdn}") )
        [[ "${ip}" == "-" ]] && ip="${file_result[0]}"
        [[ "${mac}" == "-" ]] && mac="${file_result[1]}"
    fi
    echo "${ip}" "${mac}"
}

function ipa::reregister-check()
{
    local fqdn="${1}"
    local reregister="${2}"
    if ipa host-find "${fqdn%.}"
    then
        if [[ -z "${reregister}" || "${reregister}" == "ask" ]]
        then 
            local confirmation
            logmsg "The host ${fqdn} is already enrolled."
            msg "Do you wish to delete it and re-add?"
            read -p "[n/Y]: " confirmation
            if [[ "${confirmation,,}" != "y" ]]
            then
                logmsg "User cancelled add of host ${fqdn%.}"
                return 2
            else
                logmsg "User confirmed removal of ${fqdn%.} before re-add."
                reregister=1
            fi
        fi
        if [[ "${reregister}" == "1" ]]
        then 
            if ! ipa::host-rm "${fqdn%.}" 1
            then 
                return 2
            fi
        fi
    fi
    return 0
}

function ipa::reverse-zone-for-ip()
{
    echo $(tr '.' '\n' <<< "${1}" | head -n3 | tac | tr '\n' '.')in-addr.arpa
}

function ipa::delete-dnsrecords()
{
    local fqdn="${1}"
    local ip="${2}"
    local d="${fqdn#*.}"
    local n="${fqdn%%.*}"
    local r=$(ipa::reverse-zone-for-ip "${ip}")
    local final_octet="${ip##*.}"
    # At this point, fqdn should include a . at the end 
    run ipa dnsrecord-del "${d}" "${n}"           --a-rec   "${ip}"
    run ipa dnsrecord-del "${r}" "${final_octet}" --ptr-rec "${fqdn}"
}

function ipa::add-dnsrecords()
{
    local fqdn="${1}"
    local ip="${2}"
    local d="${fqdn#*.}"
    local n="${fqdn%%.*}"
    local r=$(ipa::reverse-zone-for-ip "${ip}")
    local final_octet="${ip##*.}"
    
    if ! ipa dnsrecord-find "${d}" "${n}" --raw | grep -q "arecord: ${ip}"
    then
        run ipa dnsrecord-add "${d}" "${n}"           --a-rec   "${ip}"
    else 
        echo "DNS record ${d} ${n} A ${ip} already exists" 
    fi

    if ! ipa dnsrecord-find "${r}" "${final_octet}" --raw | grep -q "ptrrecord: ${fqdn}"
    then 
        run ipa dnsrecord-add "${r}" "${final_octet}" --ptr-rec "${fqdn}"
    else
        echo "DNS record ${r} ${final_octet} PTR ${fqdn} already exists"
    fi
}

function ipa::host-promote()
{
    local fqdn="${1}"
    run ipa hostgroup-add-member ipaservers --hosts="${fqdn%.}"
}

function ipa::host-add()
{
    local kind="${1}"
    local reregister="${2}"
    local fqdn="${3}"
    local host_ip="${4}"
    local mac="${5}"
    local special="${6}"
    local site="${7:-${default_site}}"

    if ! ipa::require-ticket admin
    then 
        return 2
    fi

    if [[ "${kind}" == "host" ]]
    then 
        if ! ipa::reregister-check "${fqdn}" "${reregister}"
        then
            return 2
        fi
    fi 

    if [[ "${kind}" == "host" ]]
    then 
        ipa::delete-dnsrecords "${fqdn}" "${host_ip}" #2> /dev/null
        logmsg "Registering host ${fqdn%.}"
        # TODO - stop this using the commandline for the enrol_secret
        enrol_secret=$(salt-secret ipa_client_enrol)
        if [[ -z "${enrol_secret}" ]]
        then 
            err "No enrolment otp has been sent to this minion"
        else
            if run ipa host-add "${fqdn%.}" --ip "${host_ip}" --mac "${mac}" --password="${enrol_secret}" --location="${site}"
            then
                if [[ "${special}" == "replica" ]]
                then
                    ipa::host-promote "${fqdn}"
                fi
            fi
        fi
    elif [[ "${kind}" == "dns" ]]
    then
        ipa::add-dnsrecords "${fqdn}" "${host_ip}"
    fi

    msg "Updating PXE booting configuration."
    salt-deploy pxebooting
}

function ipa::dns-add()
{
    local fqdn="${1}"
    local host_ip="${2}"

    if ! ipa::require-ticket admin
    then 
        return 2
    fi

    ipa::add-dnsrecords "${fqdn}" "${host_ip}"
}

function ipa::host-rm()
{
    local fqdn="${1}"
    local deregister="${2}"

    if ! ipa::require-ticket admin
    then 
        return 2
    fi
    
    if (( deregister ))
    then 
        msg "Searching for ${fqdn%.}"
        if ipa host-find "${fqdn%.}" 2> /dev/null > /dev/null
        then 
            # ipa host-del used to delete DNS SSHFP entries at least
            # but now it doesn't so we need --updatedns
            run ipa host-del "${fqdn%.}" --updatedns
        else 
            msg "Host ${fqdn} was not registered"
        fi 
    fi 

    ipa::delete-dnsrecords "${fqdn}" "${host_ip}" 2> /dev/null

    if [[ -f ~/.ssh/known_hosts ]]
    then
        local pattern="^${fqdn%%.*}[[:space:].]"
        egrep "${pattern}" ~/.ssh/known_hosts >> ~/.ssh/known_hosts_deleted
        sed -i "/${pattern}/ d" ~/.ssh/known_hosts
    fi
}

function ipa::require-ticket()
{
    local ticket_name="${1}" # @${ipa_realm}"
    if klist -l | grep "${ticket_name}"
    then
        return 0
    else 
        local secret_name="pw-ipa-${ticket_name}"
        if salt-secret --list | egrep "^${secret_name}\$"
        then 
            salt-secret "${secret_name}" | kinit "${ticket_name}"
        else
            kinit "${ticket_name}"
        fi
    fi
}

function ipa::is-bind-user()
{
    local user_name="${1}"
    if groups "${user_name}" | egrep '[[:space:]]bind-users([[:space:]]|$)'
    then 
        return 0
    else
        return 1
    fi 
}

function ipa::save-bind-user-pw()
{
    local user_name="${1}"
    local secret_name="pw-bind-user-${user_name}"
    if [[ -z "${user_name}" ]]
    then 
        secret_name="pw-bind-user"
    fi
    local pw="${2}"
    #mkdir -p /root/.bind-users
    #cat > "/root/.bind-users/${user_name}.txt" <<< "${pw}" 
    #chmod go-rwx /root/.bind-users/*
    #chmod o-rwx /root/.bind-users /root
    #chgrp root /root 
    salt-secret -save "${secret_name}" -stdin <<< "${pw}"
}

function ipa::send-password-email()
{
    local user_name="${1}"
    local new_pw="${2}"
    local emailaddr="${3}"
    if ! [[ "${emailaddr}" =~ @ ]]
    then 
        err "Invalid email '${emailaddr}'"
        return 2
    fi
    # TODO - support half/half passwords
    # TODO - support email template from pillar
    local lf=$'\n'
    local data="Your password has been reset to:${lf}${lf}${new_pw}${lf}${lf}Please change it immediately.${lf}"
    
    #data=$(sed 's/^[[:space:]]*//' <<< "${data}")
    if mail -s "[SENSITIVE] Password reset" "${emailaddr}" <<< "${data}"
    then 
        msg "Email contents:"
        cat <<< "${data}"
        msg "Run: mail -s \"[SENSITIVE] Password reset\" \"${emailaddr}\" "
        msg "Sent."
        return 0
    else 
        msg "Not sent (failed)."
        return 2
    fi 
}

function ipa::reset-user-passwd()
{
    local user_name="${1}"
    local send_email="${2:-0}"

    if ! ipa::require-ticket admin
    then 
        return 2
    fi

    local new_password=$(mktemp -u XXXXXXXXXX)
    if [[ -z "${new_password}" ]]
    then 
        err "Failed to generate a random password"
        return 2
    fi

    local password_input=""
    if [[ "${user_name}" == "admin" ]]
    then 
        local current_password=$(salt-secret pw-ipa-admin)
        password_input+="${current_password}"$'\n'
    fi
    password_input+="${new_password}"$'\n'"${new_password}"$'\n'
    if ! ipa passwd "${user_name}" <<< "${password_input}"
    then 
        err "Failed setting password for user '${user_name}'"
        return 2
    fi
    if ipa::is-bind-user "${user_name}"
    then 
        ipa::save-bind-user-pw "${user_name}" "${new_password}"
    fi  

    local email_address=$(ipa user-show "${user_name}" --raw | grep mail: | cut -d ':' -f2- | tr -d ' ')
    local sent=0

    if (( send_email )) 
    then
        if [[ -n "${email_address}" ]]
        then 
            if ipa::send-password-email "${user_name}" "${new_password}" "${email_address}"
            then 
                sent=1
            else 
                err "Sending failed."
            fi
        else 
            err "The user has no email address set."
        fi
    fi 

    if ! (( sent ))
    then
        msg "The user password was set to ${new_password}"
    fi
}

function ipa::create-user()
{
    local u="${1}"
    local email="${2}"
    local first_name="${3}"
    local last_name="${4}"
    local save_it="${5}"
    local verbose="${6:-0}"

    if ! quiet ipa user-find --login="${u}"
    then
        msg "Creating user ${u}"
        if verbose ipa user-add "${u}" --email="${email}" --first="${first_name}" --last="${last_name}"
        then
            msg "Setting password for user ${u}"
            ipa::set-password "${u}" "" "${save_it}"
        else
            err "Failed adding user ${u}"
            return 2
        fi
    elif (( verbose ))
    then 
        msg "User ${u} already exists"
    fi
}

function ipa::set-password()
{
    local u="${1}"
    local p2="${2}"
    local save_it="${3}"
    local p1=$(mktemp -u XXXXXXXXXXXXXXXXX)
    [[ -n "${p2}" ]] || p2=$(mktemp -u XXXXXXXXXXXXXXXXX)
    
    local lf=$'\n'
    ipa passwd "${u}" <<< "${p1}${lf}${p1}${lf}"
    su -c "passwd" "${u}" <<< "${p1}${lf}${p2}${lf}${p2}${lf}"

    local result=$?

    if [[ "${save_it}" == "save" ]]
    then
        mkdir -p /root/.bind-users
        chmod ug-rwx /root/.bind-users
        local savefile="/root/.bind-users/${u}.txt"
        if (( result ))
        then
            p2="${p2} (failed)"
        fi
        # NOTE the construct cat > f <<< var   is used to protect the contents of the string from the commandline
        cat > "${savefile}" <<< "${p2}"
        chmod go-rwx "${savefile}"
    fi
}

function ipa::check-group-member()
{
    if ipa group-show "${1}" 2> /dev/null | egrep -q "[:,] ${2}(,|\$)"
    then 
        return 0
    else 
        return 1
    fi
}

function ipa::load-admin-passwords()
{
    . /etc/sysconfig/ipa-passwords
    local p
    for p in admin ds master
    do
        local varname="${p}_password"
        local value="${!varname}"
        if [[ "${value}" =~ ^salt-secret: ]]
        then
            value=$(salt-secret "${value#salt-secret:}")
        fi
    done
}


function ipa::list-ticket()
{
    if [[ -f "${KRB5CCNAME}" ]]
    then 
        export KRB5CCNAME
        klist
    else
        msg "No current ticket"
    fi
}

function ipa::renew-ticket()
{
    mkdir -p "${ticket_dir}"

    local admin_password=$(salt-secret pw-ipa-admin)

    if [[ -n "${admin_password}" ]]
    then 
        msg "Using randomly generated IPA passwords during install."

        # Load pregenerated passwords
        kinit admin <<< "${admin_password}"
    elif [[ -t 0 ]]
    then
        l=7
        r=9
        msg "Requesting renewable ticket. The ticket will work for ${l} days. Admin will need to renew each ${r} days."
        msg "NOTE: the ticket is valid for use on this host only."
        kinit -l "${l}d" -r "${r}d" -a admin
    else
        err "Past install phase and a tty is not available for entering the password"
        return 2
    fi
}

function ipa::reset-user-passwd::usage()
{
    echo "Usage: reset-user-passwd [options] [username]"
    echo ""    
    echo "Reset a user password."
    echo ""
    echo "Options:"
    echo ""
    echo "  -u,--user <username>       Specify the user name."
    echo "  --no-email                 Don't send the password via email."
    echo "  --email|--send             Send the password via email."
}

function ipa::reset-user-passwd::process-argv()
{
    local arg i d f n 

    while (( $# ))
    do
        arg="${1}"
        shift 
        
        case "${arg}" in
            -h|-help|--help) 
                ipa::reset-user-passwd::usage
                return 1
                ;;
            -u|--user|-user)
                username="${1}"
                shift 
                ;;
            -n|--no-email|-no-email)
                send_email=0
                ;;
            -e|--email|-email|--send|-send)
                send_email=1
                ;;
            [a-z][-_a-z0-9]*)
                username="${arg}"
                ;;
            *)
                ipa::reset-user-passwd::usage
                err "Unrecognised option: '${arg}'"
                return 2
                ;;
        esac
    done 

    if [[ -z "${username}" ]]
    then
        err "No username specified"
        return 2
    fi

    if ! [[ "${username}" =~ ${valid_username_regex} ]]
    then 
        err "Invalid username"
        return 2
    fi
}

function ipa::reset-user-passwd::main()
{
    local username=""
    local send_email=0

    local status
    ipa::reset-user-passwd::process-argv "${@}"
    status=$?
    
    if [[ "${status}" == 1 ]]
    then
        # Usage was printed
        return 0
    elif [[ "${status}" != 0 ]]
    then 
        # failed arg processing
        return 2
    fi

    ipa::reset-user-passwd "${username}" ${send_email}
}

function ipa::host-add::usage()
{
    echo "Usage: host-add [OPTIONS] [<hostname>] [IP] [MAC]"
    echo ""
    echo "Add (register) a host with IPA or add DNS entries."
    echo ""
    echo "The host should already be configured in salt."
    echo "or else you'll need to specify the IP and also the MAC if performing host enrollment."
    echo ""
    echo "Options:"
    echo ""
    echo "  --replica     Allow this host to become a replica"
    echo "  --update      Do not create - only update (for use with --replica)"
    echo "  --dns-only    Perform DNS updates only (no enrollment)."
    echo "  -m <MAC>      Specify the MAC address."
    echo "  -i <IP>       Specify the IP address."
    echo "  -n <name>     Specify the host name."
    echo "  -d <domain>   Specify the domain name."
    echo "  -f <fqdn>     Specify the fully qualified domain name (hostname.domain)."
    echo "  -m <mac>      Specify the mac address"
    echo "  -s <site>     Specify the automount site"
    echo ""
}

function ipa::host-add::process-argv()
{
    local arg i m d f n s
    local opt 

    while (( $# ))
    do
        arg="${1}"
        shift 
        
        case "${arg}" in
            -h|-help|--help) 
                ipa::host-add::usage
                return 1
                ;;
            -dns-only|--dns-only)
                mode="dns"
                ;;
            -replica|--replica)
                mode="register"
                allow_replica=1
                special="replica"
                ;;
            -promote|--promote)
                mode="promote"
                special="replica"
                ;;
            --re-register)
                reregister=1
                ;;
            -m|--mac|-mac) 
                m="${1}"
                shift
                ;;
            -i|--ip|-ip)
                i="${1}"
                shift
                ;;
            -n|--name|-name)
                n="${1}"
                shift
                ;;
            -s|--site|-site)
                s="${1}"
                shift
                ;;
            -f|--fqdn|-fqdn)
                f="${1}"
                shift
                ;;
            -d|--domain|-domain)
                d="${1}"
                shift
                ;;
            ??:??:??:??:??:??)
                m="${arg}"
                shift
                ;;
            [0-9]*)
                i="${arg}"
                shift
                ;; 
            [a-zA-Z]*.*)
                f="${arg}"
                ;;
            [a-zA-Z]*)
                n="${arg}"
                ;;
            *)
                ipa::host-add::usage
                err "Unrecognised option: '${arg}'"
                return 2
                ;;
        esac
    done 

    errs=()
    [[ -n "${m}" && ! "${m}" =~ ${mac_regex} ]] && errs+=("Invalid MAC address: '${m}'")
    [[ -n "${i}" && ! "${i}" =~ ${ip_regex} ]] && errs+=("Invalid IP address: '${i}'")
    [[ -n "${f}" && ! "${f}" =~ [.] ]] && errs+=("FQDN does not include a domain: '${f}'")
    [[ -n "${f}" && ! "${f}" =~ [.][^.] ]] && errs+=("FQDN does include a domain: '${f}'")
    [[ -n "${f}" && "${f}" =~ ^[.] ]] && errs+=("FQDN cannot start with a dot: '${f}'")
    [[ -n "${d}" && -n "${f}" ]] && errs+=("Mutually exclusive options (domain and fqdn).")
    [[ "${n}" =~ [.] ]] && errs+=("Name option does not accept fully qualified names. Use the -f option")

    if (( {%raw%}${#errs[@]}{%endraw%} ))
    then 
        local e
        for e in "${errs[@]}"
        do
            err "${e}"
        done
        return 2
    fi

    if [[ -z "${f}" ]]
    then
        # Generate the fqdn from other vars
        if [[ -n "${n}" && -n "${d}" ]]
        then
            f="${n}.${d}."
        elif [[ -n "${n}" ]]
        then 
            d="${default_regular_zone%.}"
            f="${n}.${d}."
        else
            err "At least a node name must be specified!"
            return 2
        fi
    else
        # Break down the fqdn into domain, name, and make sure it has the dot at the end
        d="${f#*.}"
        n="${f%%.*}"
        f="${f%.}."
    fi

    if [[ ! "${f}" =~ ${fqdn_regex} ]]
    then 
        err "Invalid host name: '${f}'"
        return 2
    fi
    
    fqdn="${f%.}."

    [[ -n "${i}" ]] && host_ip="${i}"
    [[ -n "${m}" ]] && mac="${m}"

    if [[ -z "${mac}" || -z "${host_ip}" ]]
    then 
        local -a lookup_results=( $(ipa::lookup-host-info "${fqdn}") )
        [[ -z "${host_ip}" && "${lookup_results[0]}" != "-" ]] && host_ip="${lookup_results[0]}"
        [[ -z "${mac}" && "${lookup_results[1]}" != "-" ]] && mac="${lookup_results[1]}"
    fi

    if (( register )) && [[ -z "${mac}" ]]
    then 
        err "No MAC information specified and not found from salt host lookup"
        return 2
    fi 

    if [[ -z "${host_ip}" ]]
    then
        err "No MAC information specified and not found from salt host lookup"
        return 2
    fi

    site="${s}"

    # At the end of argument processing, we need to have a valid:
    #   fqdn (with dot at the end)
    #   host_ip 
    # and if the host is to be registered (not dns-only):
    #   mac
}

function ipa::host-add::create-keystore-for-host()
{
    warn "${FUNCNAME[0} - unimplemented"
}

function ipa::host-add::main()
{
    local fqdn=""
    local mac=""
    local host_ip=""
    local site=""

    local mode="register"
    local reregister="ask"
    local special=""
    local kind="host"

    local status
    ipa::host-add::process-argv "${@}"
    status=$?
    
    if [[ "${status}" == 1 ]]
    then
        # Usage was printed
        return 0
    elif [[ "${status}" != 0 ]]
    then 
        # failed arg processing
        return 2
    fi

    case "${mode}" in
        promote)
            msg "Prepping host ${fqdn} for promotion"
            ipa::host-promote "${fqdn}"
            ;;
        dns)
            msg "Performing DNS additions only (no host enrollment)"
            ipa::dns-add "${fqdn}" "${host_ip}"
            ;;
        register)
            ipa::host-add "${kind}" "${reregister}" "${fqdn}" "${host_ip}" "${mac}" "${special}" "${site}" 
            ;;
    esac 
}

function ipa::host-rebuild::usage()
{
    echo "Usage: host-rebuild [<hostname>]"
    echo ""    
    echo "Delete and re-add a host (salt and IPA)"
    echo ""
    echo "Options:"
    echo ""
    echo "  <hostname>    The short hostname"
}

function ipa::host-rebuild::process-argv()
{
    local arg n 

    while (( $# ))
    do
        arg="${1}"
        shift 
        
        case "${arg}" in
            -h|-help|--help) 
                ipa::host-rebuild::usage
                return 1
                ;;
            -n|--name|-name)
                n="${1}"
                shift
                ;;
            [a-zA-Z]*)
                n="${arg}"
                ;;
            *)
                ipa::host-rebuild::usage
                err "Unrecognised option: '${arg}'"
                return 2
                ;;
        esac
    done 

    if [[ "${n}" =~ [.] ]] 
    then
        err "Name option does not accept fully qualified names. Use the -f option"
        return 2
    fi

    local d="${default_regular_zone%.}"
    local f="${n}.${d}."

    if [[ ! "${f}" =~ ${fqdn_regex} ]]
    then
        err "Invalid host name: '${f}'"
        return 2
    fi
    
    fqdn="${f%.}."

    # At the end of argument processing, we need to have a valid:
    #   fqdn (with dot at the end)
}

function ipa::host-rebuild()
{
    local fqdn="${1}"
    
    if [[ -z "${fqdn}" ]]
    then
        err "No fqdn specified."
        return 2
    fi

    if salt-key -d "${fqdn%%.*}"
    then
        ipa::host-rm::main "${fqdn}"
        ipa::host-add::main "${fqdn}"
    fi
}

function ipa::host-rebuild::main()
{
    local fqdn=""
    local status
    ipa::host-rebuild::process-argv "${@}"
    status=$?
    if [[ "${status}" == 1 ]]
    then 
        # usage was printed
        return 0
    elif [[ "${status}" != 0 ]]
    then 
        return 2
    fi

    ipa::host-rebuild "${fqdn}"
}

function ipa::host-rm::usage()
{
    echo "Usage: host-rm [options] [<hostname>] [IP]"
    echo ""    
    echo "De-register a host from IPA or remove DNS entries"
    echo ""
    echo "Options:"
    echo ""
    echo "  -i <IP>       Specify the IP address."
    echo "  -n <name>     Specify the host name."
    echo "  -d <domain>   Specify the domain name."
    echo "  -f <fqdn>     Specify the fully qualified domain name (hostname.domain)."
    echo "  --dns-only    Only delete DNS records"
}

function ipa::host-rm::process-argv()
{
    local arg i d f n 

    while (( $# ))
    do
        arg="${1}"
        shift 
        
        case "${arg}" in
            -h|-help|--help) 
                ipa::host-rm::usage
                return 1
                ;;
            -dns-only|--dns-only)
                deregister=0
                ;;
            -i|--ip|-ip)
                i="${1}"
                shift
                ;;
            -n|--name|-name)
                n="${1}"
                shift
                ;;
            -f|--fqdn|-fqdn)
                f="${1}"
                shift
                ;;
            -d|--domain|-domain)
                d="${1}"
                shift
                ;;
            [0-9]*)
                i="${arg}"
                shift
                ;; 
            [a-zA-Z]*.*)
                f="${arg}"
                ;;
            [a-zA-Z]*)
                n="${arg}"
                ;;
            *)
                ipa::host-rm::usage
                err "Unrecognised option: '${arg}'"
                return 2
                ;;
        esac
    done 

    if [[ -n "${i}" && ! "${i}" =~ ${ip_regex} ]]
    then
        err "Invalid IP address: '${i}'" 
        return 2
    fi
    
    if [[ -n "${f}" && ! "${f}" =~ [.] ]]
    then
        err "FQDN does not include a domain: '${f}'"
        return 2
    fi
    
    if [[ -n "${f}" && ! "${f}" =~ [.][^.] ]]
    then
        err "FQDN does include a domain: '${f}'"
        return 2
    fi

    if [[ -n "${f}" && "${f}" =~ ^[.] ]]
    then
        err "FQDN cannot start with a dot: '${f}'"
        return 2
    fi

    if [[ -n "${d}" && -n "${f}" ]]
    then
        err "Mutually exclusive options (domain and fqdn)."
        return 2
    fi
    
    if [[ "${n}" =~ [.] ]]
    then
        err "Name option does not accept fully qualified names. Use the -f option"
        return 2
    fi

    if [[ -z "${f}" ]]
    then
        if [[ -n "${n}" && -n "${d}" ]]
        then
            f="${n}.${d}."
        elif [[ -n "${n}" ]]
        then 
            d="${default_regular_zone%.}"
            f="${n}.${d}."
        else
            err "At least a node name must be specified!"
            return 2
        fi
    else
        d="${f#*.}"
        n="${f%%.*}"
        f="${f%.}."
    fi

    if [[ ! "${f}" =~ ${fqdn_regex} ]]
    then
        err "Invalid host name: '${f}'"
        return 2
    fi

    if [[ -n "${i}" && ! "${i}" =~ ${ip_regex} ]]
    then 
        err "Invalid IP address: '${i}'"
        return 2
    fi
    
    fqdn="${f%.}."

    [[ -n "${i}" ]] && host_ip="${i}"

    if [[ -z "${host_ip}" ]]
    then 
        local -a lookup_results=( $(ipa::lookup-host-info "${fqdn}") )
        [[ -z "${host_ip}" && "${lookup_results[0]}" != "-" ]] && host_ip="${lookup_results[0]}"
    fi

    if [[ -z "${host_ip}" ]]
    then 
        err "No MAC information specified and not found from salt host lookup"
        return 2
    fi

    # At the end of argument processing, we need to have a valid:
    #   fqdn (with dot at the end)
    #   host_ip 
}

function ipa::host-rm::main()
{
    local fqdn=""
    local host_ip=""
    local deregister=1

    local status
    ipa::host-rm::process-argv "${@}"
    status=$?
    
    if [[ "${status}" == 1 ]]
    then
        # Usage was printed
        return 0
    elif [[ "${status}" != 0 ]]
    then 
        # failed arg processing
        return 2
    fi

    ipa::host-rm "${fqdn}" "${deregister}"
}

function ipa::salt-ipa-ticket::usage()
{
    msg "Usage: salt-ipa-ticket [--help | --renew | --list | --shell ]"
    msg ""
    msg "Renew kerberos ticket for Saltstack / IPA integration"
    msg ""
    msg "Modes:"
    msg ""
    msg "   --renew   Renew the ticket"
    msg "   --list    Display the ticket"
    msg "   --shell   Load the ticket and drop into a new shell (using that ticket)"
}

function ipa::salt-ipa-ticket::main()
{
    if ! (( $# ))
    then
        ipa::salt-ipa-ticket::usage 
        return 2
    elif [[ "${*}" =~ ${HELP_REGEX} ]]
    then
        ipa::salt-ipa-ticket::usage
        return 1
    else
        export KRB5CCNAME
        case "${1}" in 
            -l|-list|--list|list)
                ipa::list-ticket
                ;;
            -r|-renew|--renew|renew)
                ipa::renew-ticket
                ;;
            -s|-shell|--shell|shell)
                shift
                bash "${@}"
                ;;
            *)
                ipa::salt-ipa-ticket::usage
                err "Unrecognised argument."
                return 2
                ;;
        esac 
    fi 
}

function ipa::upgrade-passwords()
{
    
    if [[ -s "${installation_pwfile}" ]]
    then 
        . "${installation_pwfile}"
        for pw_name in master admin ds
        do
            varname="${pw_name}_password"
            pwvalue="${!varname}"

            if [[ "${pwvalue#salt-secret:}" == "${pwvalue}" ]]
            then
                # The password is non-empty and is not yet a salt secret
                if [[ -n "${pwvalue}" ]] 
                then
                    secret_name="pw-ipa-${pw_name}"
                    salt-secret -master -save "${secret_name}" -stdin <<< "${pwvalue}"
                    # Update the file to refer to the secret
                    sed -r -i "s/^(${varname})=(.*)/\1=salt-secret:${secret_name}/" "${installation_pwfile}"
                fi
            fi
        done
    fi
}

function ipa::user-create::usage()
{
    echo "Usage: user-create <username> [-e email] [-f firstname] -s [surname] [--send]"
    echo ""
    echo "Add a user account"
    echo ""
    echo "The IPA server should have already been configured."

    echo ""
    echo "Options:"
    echo ""
    echo "  -e|-email <email-address>"
    echo "  -f|-first <firstname>"
    echo "  -s|-surname <surname>"
    echo "  -u|-user <username>"
}

function ipa::user-create::process-argv()
{
    local arg
    local opt 

    while (( $# ))
    do
        arg="${1}"
        shift 
        
        case "${arg}" in
            -h|-help|--help) 
                ipa::user-create::usage
                return 1
                ;;
            [a-z]*)
                username="${arg}"
                ;;
            -u|--user|-user)
                username="${1}"
                shift
                ;;
            -e|--email|-email)
                email="${1}"
                shift
                ;;
            -f|--first|-first)
                firstname="${1}"
                shift
                ;;
            -s|--surname|-surname|--last|-last|-l)
                surname="${1}"
                shift
                ;;
            --send)
                send_email=--send
                ;;
            *)
                ipa::user-create::usage
                err "Unrecognised option: '${arg}'"
                return 2
                ;;
        esac
    done 

    if [[ -z "${username}"  ]]
    then 
        err "No username specified!"
        return 2
    fi

    if ! [[ "${username}" =~ ${valid_username_regex} ]]
    then
        err "Invalid username '${username}' specified!"
        return 2
    fi
    
    if [[ -z "${firstname}" ]]
    then 
        err "No first name specified!"
        return 2
    fi

    if [[ -z "${surname}"   ]]
    then 
        err "No surname specified!"
        return 2
    fi

    [[ -z "${email}"     ]] && email="${username}@${IPA_EMAIL_DOMAIN}"
}

function ipa::user-create::integrations()
{
    local username="${1}"
    # Gitlab integration (register the account in gitlab and confirm the email)
    local is_gitlab_user=0
    local is_gitlab_admin=0

    ipa::check-group-member "gitlab-users" "${username}" && is_gitlab_user=1
    ipa::check-group-member "gitlab-admins" "${username}" && is_gitlab_admin=1

    if (( is_gitlab_user + is_gitlab_admin ))
    then 
        local -a flags=("--create" "--confirm")
        (( is_gitlab_admin )) && flags+=("--admin")
        gitlab-util "${username}" "${flags[@]}"
    else 
        msg "Gitlab account setup is not activated for this user (not in gitlab-users or gitlab-admins group)"
    fi

}

function ipa::user-create::main()
{
    local username=""
    local firstname=""
    local surname=""
    local send_email="${IPA_PW_SEND_EMAIL}"

    local status
    ipa::user-create::process-argv "${@}"
    status=$?
    
    if [[ "${status}" == 1 ]]
    then
        # Usage was printed
        return 0
    elif [[ "${status}" != 0 ]]
    then 
        # failed arg processing
        return 2
    fi

    if ! ipa::require-ticket admin
    then 
        return 2
    fi
    
    if quiet ipa user-find --login="${username}"
    then
        msg "User '${username}' already exists."
    elif ! ipa::create-user "${username}" "${email}" "${firstname}" "${surname}" ""
    then
        err "User creation failed for user '${username}'"
        return 2
    else 
        local g
        for g in "${IPA_DEFAULT_GROUPS[@]}"
        do 
            ipa::check-group-member "${g}" "${username}" || verbose ipa group-add-member "${g}" --user "${username}"
        done

        ipa::user-create::integrations "${username}"

        ipa::reset-user-passwd "${username}" ${send_email}
    fi
}

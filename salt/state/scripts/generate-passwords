#!/bin/bash

# Generate some passwords and save them in encrypted storage
# which can be decrypted with the salt-secret script

. /usr/local/bin/soestack-lib.sh

secret_name_regex='^[A-Za-z]([-A-Za-z0-9_]*[A-Za-z0-9]|)$'
verbose=1

function check_dir()
{
    [[ -d "${1}" ]] || mkdir "${1}"
    chmod 700 "${1}"
}

function usage()
{
    local exitcode="${1:-0}"
    msg "${0##*/} [-h|-help|--help|help] [-random|-ask] [-single] [password-name] [password-name]..."
    msg ""
    msg "Options:"
    msg "  -random  - generate random passwords"
    msg "  -single  - use the same value for all passwords"
    msg "  -ask     - ask for the password value with an interactive prompt"
    msg "  -stdin   - read a single line from stdin as the password value. No verification of the value is performed"
    exit ${exitcode}
}

function run()
{
    if (( verbose ))
    then 
        echo "Run: ${*}" 1>&2
    fi
    "${@}"
}

function generate_passwords()
{
    local style="${1}"
    local random_style="${2}"
    shift 2
    local secret_name
    local pwvalue=""
    for secret_name in "${@}"
    do
        [[ -z "${pwvalue}" ]] && pwvalue=$(mktemp -u XXXXXXXXXXXXX)
        salt-secret "${secret_name}" <<< "${pwvalue}"

        # if the style is to generate multiple different passwords, then 
        # reset it here so it is re-generated
        [[ "${random_style}" == "multi" ]] && pwvalue=""
    done
}

function main()
{
    local secret_names=()
    local style="ask"
    local multi=1
    local length=13
    local min_length=""
    local arg
    while (( $# ))
    do
        arg="${1}"
        shift
        case "${arg}" in
            -h|-help|--help|help)
                usage 0
                ;;
            -random)
                style="random"
                ;;
            -allow-empty)
                min_length=0
                ;;
            -min-length=*)
                min_length="${arg#-min-length=}"
                if ! [[ "${min_length}" =~ ^[0-9][0-9]$ ]]
                then
                    err "Invalid minimum length: '${min_length}'
                    usage 1
                fi
                ;;
            -length=*)
                length="${arg#-length=}"
                if ! [[ "${length}" =~ ^[0-9][0-9]$ ]]
                then
                    err "Invalid length: '${length}'
                    usage 1
                fi
                [[ -z "${min_length}" ]] && min_length="${length}"
                ;;
            -single)
                multi=0
                ;;
            -stdin)
                style="stdin"
                ;;
            -ask)
                style="ask"
                ;;
            *)
                if [[ "pw-${arg}" =~ ${secret_name_regex} ]]
                then
                    secret_names+=("pw-${arg}")
                else
                    err "Invalid secret name: '${arg}'"
                    usage 1
                fi
                ;;
        esac
    done

    local count="{%raw%}${#secret_names[@]}{%endraw%}"
    if ! (( count ))
    then
        err "No password names specified"
        usage 1
    fi

    local pwvalue=""


    local secret_name
    for secret_name in "${secret_names[@]}"
    do 
        if [[ -z "${pwvalue}" ]]
        then 
            if [[ "${style}" == "ask" ]]
            then
                [[ -z "${min_length}" ]] && min_length="${length}"
                pwvalue=$(ask_password_twice "${secret_names[0]}" "${min_length}")
            elif [[ "${style}" == "random" ]]
            then
                if [[ "${length}" -lt 3 ]]
                then 
                    pwvalue=$(mktemp -u XXXXXXX)
                    pwvalue="${pwvalue:0:${length}}"
                else
                    local template=$(printf "%0.sX" $(seq 1 ${length}))
                    pwvalue=$(mktemp -u $template)
                fi
            elif [[ "${style}" == "stdin" ]]
            then
                read pwvalue
                if [[ -n "${min_length}" && {%raw%}"${#pwvalue}{%endraw%}" -lt "${min_length}" ]]
                then 
                    err "Password for ${secret_name} was rejected as too short. Minimum length is ${min_length}."
                    continue 
                fi
            fi
        fi
        
        run salt-secret "${secret_name}" -save -stdin <<< "${pwvalue}"

        if (( multi ))
        then
            pwvalue=""
        fi
    done
}

main "${@}"
